<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="Luma.SimpleEntity.CreateClientFilesTask"
             AssemblyFile="Luma.SimpleEntity.dll" />

  <UsingTask TaskName="Luma.SimpleEntity.CleanClientFilesTask"
             AssemblyFile="Luma.SimpleEntity.dll" />

  <!--
    ============================================================
    SimpleEntityCodeGen

    Target to generate the client proxy classes.
    This target is hooked into the CoreCompileDependsOn group
    so that it executes at compile time. It depends on
    SimpleEntityCodeGenDependsOn to offer clients extension points
    before and after code generation.
    ============================================================
    -->
  <PropertyGroup>
    <SimpleEntityCodeGenDependsOn>
      BeforeSimpleEntityCodeGen;
      CoreSimpleEntityCodeGen;
      AfterSimpleEntityCodeGen;
    </SimpleEntityCodeGenDependsOn>
  </PropertyGroup>

  <Target Name="SimpleEntityCodeGen"
          DependsOnTargets="$(SimpleEntityCodeGenDependsOn)" />

  <!--
    ============================================================
    BeforeSimpleEntityCodeGen

    Redefine this target in your project in order to run tasks
    before client proxy code generation occurs
    ============================================================
    -->
  <Target Name="BeforeSimpleEntityCodeGen">
  </Target>

  <!--
    ============================================================
    AfterSimpleEntityCodeGen

    Redefine this target in your project in order to run tasks
    after client proxy code generation has been done
    ============================================================
    -->
  <Target Name="AfterSimpleEntityCodeGen" >
  </Target>

  <!--
    ================================================================
    CoreSimpleEntityCodeGen

    Target to generate the client proxy classes,
    called after BeforeSimpleEntityCodeGen and before AfterSimpleEntityCodeGen.
    This target depends on CoreSimpleEntityCodeGenDependsOn to provide an
    extension point for clients.
      
    ================================================================
    -->
  <PropertyGroup>
    <CoreSimpleEntityCodeGenDependsOn>
      PrepareForSimpleEntityCodeGen;
      CreateSimpleEntityClientFiles;
    </CoreSimpleEntityCodeGenDependsOn>
  </PropertyGroup>

  <Target Name="CoreSimpleEntityCodeGen"
        DependsOnTargets="$(CoreSimpleEntityCodeGenDependsOn)">
  </Target>


  <!--
    ============================================================
    SimpleEntityClean

    Target to remove the generated files.  Other code generators
    can add themselves to $(SimpleEntityCleanDependsOn) to be
    invoked.
    ============================================================
    -->
  <PropertyGroup>
    <SimpleEntityCleanDependsOn>
      CleanSimpleEntityClientFiles;
    </SimpleEntityCleanDependsOn>
  </PropertyGroup>

  <Target Name="SimpleEntityClean"
          DependsOnTargets="$(SimpleEntityCleanDependsOn)" />

  <PropertyGroup>
    <_SimpleEntityCodeGenOutputPath>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(IntermediateOutputPath)'))</_SimpleEntityCodeGenOutputPath>
    <_SimpleEntityCodeGenHistoryFile>$([System.IO.Path]::Combine('$(_SimpleEntityCodeGenOutputPath)', '$(MSBuildProjectName).SimpleEntity.txt'))</_SimpleEntityCodeGenHistoryFile>
  </PropertyGroup>

  <!--
    ================================================================
    Open Ria Services Link is present
      CoreCompile will execute SimpleEntityCodeGen to generate code, and
      Clean will exectute SimpleEntityClean to delete it
    ================================================================
    -->
  <PropertyGroup Condition="'$(LinkedServerProject)' != '' ">

    <CleanDependsOn>
      $(CleanDependsOn);
      SimpleEntityClean;
    </CleanDependsOn>

    <CoreCompileDependsOn>
      SimpleEntityCodeGen;
      $(CoreCompileDependsOn);
    </CoreCompileDependsOn>
  </PropertyGroup>

  <!--
    ================================================================
    Open Ria Services Link is absent but residual generated files remain
      CoreCompile and Clean will both execute SimpleEntityClean
      to delete obsolete generated files.
    ================================================================
    -->
  <PropertyGroup Condition="'$(LinkedServerProject)' == '' and Exists('$(_SimpleEntityCodeGenHistoryFile)') ">

    <CleanDependsOn>
      $(CleanDependsOn);
      SimpleEntityClean;
    </CleanDependsOn>

    <CoreCompileDependsOn>
      SimpleEntityClean;
      $(CoreCompileDependsOn);
    </CoreCompileDependsOn>
  </PropertyGroup>


  <PropertyGroup>
    <!-- Default Open RIA Services client references -->
    <DefaultClientReferences>System.ComponentModel.DataAnnotations.dll;System.Runtime.Serialization.dll;System.ServiceModel.dll;Luma.SimpleEntity.Client.dll;Luma.SimpleEntity.Client.Web.dll;System.ServiceModel.Web.Extensions</DefaultClientReferences>
  </PropertyGroup>

  <!--
    ================================================================
    CleanSimpleEntityClientFiles

    Target to invoke the CleanClientFilesTask to delete all
    files generated by CreateClientFilesTask
      
    ================================================================
    -->
  <Target Name="CleanSimpleEntityClientFiles">

    <!--
    ================================================================
    CleanClientFilesTask

    Task that deletes the client files created by CreateClientFiles 
    
    Arguments are:
      ClientProjectPath:          path to currently executing (client) project file
      OutputPath:                 path to folder to write temporary files for tracking prior builds
      
    Outputs are:
       none      
      
    ================================================================
    -->
    <CleanClientFilesTask
       ClientProjectPath="$(MSBuildProjectFullPath)"
       OutputPath="$(IntermediateOutputPath)"
       ContinueOnError="false">
    </CleanClientFilesTask>

  </Target>


  <!--
    ================================================================
    PrepareForSimpleEntityCodeGen

    Target to prepare all the inputs necessary for
    client proxy class generation. This target depends on
    PrepareForSimpleEntityCodeGenDependsOn to permit clients to
    preprocess or postprocess the inputs.
      
    ================================================================
    -->
  <PropertyGroup>
    <PrepareForSimpleEntityCodeGenDependsOn>
      ResolveSimpleEntityCodeGenInputs;
    </PrepareForSimpleEntityCodeGenDependsOn>
  </PropertyGroup>

  <Target Name="PrepareForSimpleEntityCodeGen"
          DependsOnTargets="$(PrepareForSimpleEntityCodeGenDependsOn)" >
  </Target>

  <!--
    ================================================================
    ResolveSimpleEntityCodeGenInputs

    Target to extract all required inputs for the CreateSimpleEntityClientFiles
    target.  It invokes MSBuild targets to extract the assembly references
    for both client and server projects.  The item collections created
    here are consumed by CreateSimpleEntityClientFiles.
      
    ================================================================
    -->
  <Target Name="ResolveSimpleEntityCodeGenInputs" DependsOnTargets="ResolveReferences" Condition="Exists('$(LinkedServerProject)')">

    <!-- Gather the build outputs of the server project -->
    <MSBuild   Projects="$(LinkedServerProject)" Targets="GetTargetPath">
      <Output TaskParameter="TargetOutputs" ItemName="SimpleEntityCodeGenServerBuildOutput" />
    </MSBuild>

    <!-- Gather the reference assemblies used by the server project -->
    <MSBuild   Projects="$(LinkedServerProject)" Targets="BuiltProjectOutputGroupDependencies">
      <Output TaskParameter="TargetOutputs" ItemName="SimpleEntityCodeGenServerReferenceAssemblies" />
    </MSBuild>

    <!-- Gather the source files used by the client project -->
    <MSBuild   Projects="$(MSBuildProjectFullPath)" Targets="SourceFilesProjectOutputGroup">
      <Output TaskParameter="TargetOutputs" ItemName="SimpleEntityCodeGenClientSourceFiles" />
    </MSBuild>

    <!-- Extract the assembly references of the current project -->
    <ItemGroup>
      <SimpleEntityCodeGenClientReferenceAssemblies Include="@(ReferencePath)" />
    </ItemGroup>

    <ItemGroup>
      <SimpleEntityCodeGenClientAssemblySearchPath Include="$(TargetFrameworkDirectory)" />
      <SimpleEntityCodeGenClientAssemblySearchPath Include="$(TargetFrameworkSDKDirectory)" />
    </ItemGroup>

  </Target>

  <!--
    ================================================================
    CreateSimpleEntityClientFiles

    Target to invoke the CreateClientFilesTask after gathering
    information from $(LinkedServerProject).  It is not executed
    unless $(LinkedServerProject) is non-empty and points to a
    valid project file.
    
    This target represents the second phase of code generation
    and executes after PrepareForSimpleEntityCodeGen has prepared
    the item collections it requires for input.
          
    ================================================================
    -->
  <Target Name="CreateSimpleEntityClientFiles">

    <!--
    ================================================================
    CreateClientFilesTask

    Task that generates the client files from the linked server project 
    
    Arguments are:
      ServerProjectPath:          [required] path to the server project file
      ServerAssemblies:           [required] the list of assemblies containing business objects
      ServerReferenceAssemblies:  [required] list of reference assemblies to include in analysis
      ClientProjectRootNamespace: [required] root namespace of the client project
      ClientSourceFiles:          [required] the set of source files in the executing (client) project file
      ClientReferenceAssemblies:  [required] the set of reference assemblies for the executing (client) project file
      ClientProjectPath:          [required] path to currently executing (client) project file
      ClientAssemblySearchPaths:  [required] set of paths to search for client assemblies
      ClientFrameworkPath:        [required] the location of mscorlib.dll and the rest of the target framework for the client
      OutputPath:                 [required] path to folder to write temporary files for tracking prior builds
      Language:                   [required] the language to use to generate the client proxies
      UseFullTypeNames:           [optional] (string) boolean where "true" means fully qualified type names should be generated
      CodeGeneratorName:          [optional] the name of the code generator to use
      
    Outputs are:
      GeneratedFiles:             the list of all generated code files (does not include copied files)
      CopiedFiles:                the list of (destination) files copied to the client project from SharedFiles
      SharedFiles:                the list of (source) files named *.shared.* that are visible to the server project 
      LinkedFiles:                the list of files visible to both client and server via file links
      
    This target will update @Compile and @FileWrites with all generated files,
    even if they are found to be current and do not need to be generated.
      
    ================================================================
    -->
    <CreateClientFilesTask
       ClientProjectRootNamespace="$(RootNamespace)"
       ServerProjectPath="$(LinkedServerProject)"
       ServerAssemblies="@(SimpleEntityCodeGenServerBuildOutput)"
       ServerReferenceAssemblies="@(SimpleEntityCodeGenServerReferenceAssemblies)"
       ClientProjectPath="$(MSBuildProjectFullPath)"
       ClientReferenceAssemblies="@(SimpleEntityCodeGenClientReferenceAssemblies)"
       ClientSourceFiles="@(SimpleEntityCodeGenClientSourceFiles)"
       ClientFrameworkPath="$(FrameworkPathOverride)"
       OutputPath="$(IntermediateOutputPath)"
       Language="$(Language)"
       ContinueOnError="false"
       UseFullTypeNames="$(SimpleEntityUseFullTypeNames)"
       ClientAssemblySearchPaths="@(SimpleEntityCodeGenClientAssemblySearchPath)"
       CodeGeneratorName="$(SimpleEntityCodeGeneratorName)">

      <!-- Copy the task outputs to global item collections for other tasks -->
      <Output ItemName="SimpleEntityGeneratedFiles" TaskParameter="GeneratedFiles" />
      <Output ItemName="SimpleEntitySharedFiles" TaskParameter="SharedFiles" />
      <Output ItemName="SimpleEntityCopiedFiles" TaskParameter="CopiedFiles" />
      <Output ItemName="SimpleEntityLinkedFiles" TaskParameter="LinkedFiles" />

      <!-- Inform the compiler of the newly generated and copied files -->
      <Output ItemName="Compile" TaskParameter="GeneratedFiles" />
      <Output ItemName="Compile" TaskParameter="CopiedFiles" />

      <Output ItemName="FileWrites" TaskParameter="GeneratedFiles" />
      <Output ItemName="FileWrites" TaskParameter="CopiedFiles" />

    </CreateClientFilesTask>

  </Target>

  <!-- Import the WCF targets for proxy generation if it exists -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.VisualStudio.ServiceModel.targets"
          Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.VisualStudio.ServiceModel.targets')" />

  <!-- Import the Visual Studio WCF RIA Services package targets file if it exists -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.Ria.Client.VisualStudio.targets"
          Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.Ria.Client.VisualStudio.targets')"/>

</Project>